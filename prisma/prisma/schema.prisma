generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model Role {
//   id    Int    @id @default(autoincrement())
//   name  String @db.VarChar(255)
//   Users User[]
// }

model User {
  id          Int    @id @default(autoincrement())
  username    String @unique @db.VarChar(255)
  mail        String @db.VarChar(255)
  phone       String @db.VarChar(255)
  password    String @db.VarChar(255)
  full_name   String @db.VarChar(255)
  photo       String @db.VarChar(255)
  institution String @db.VarChar(255)
  postal_code String @db.VarChar(255)
  // enrollments    Enrollment[]
  // certificates   Certificate[]
  // completedTasks CompletedTask[]
  // roleId         Int
  // role           Role            @relation(fields: [roleId], references: [id])
}

model Certificate {
  id       Int @id @default(autoincrement())
  courseId Int
  // course   Course @relation(fields: [courseId], references: [id])
  // classId  Int
  // class    Class  @relation(fields: [classId], references: [id])
  // userId   Int    @unique
  // User     User   @relation(fields: [userId], references: [id])
}

model Enrollment {
  id                  Int      @id @default(autoincrement())
  enrollment_date     Int
  cancellation_reason String
  created_by          DateTime @default(now())
  updated_by          DateTime @updatedAt
  // userEnrollmentId    Int      @unique
  // user                User     @relation(fields: [userEnrollmentId], references: [id])
  // classId             Int      @unique
  // class               Class    @relation(fields: [classId], references: [id])
}

model Class {
  id         Int      @id @default(autoincrement())
  start_date DateTime
  end_date   DateTime
  courseId   Int
  course     Course   @relation(fields: [courseId], references: [id])
  // enrollments  Enrollment[]
  // certificates Certificate[]
}

model Course {
  id          Int            @id @default(autoincrement())
  workload    Int
  name        String         @db.VarChar(255)
  photo       String         @db.VarChar(255)
  description String         @db.Text
  classes     Class[]
  // certificates   Certificate[]
  // tasksIds       CourseTasks[]
  categoryId  Int
  category    CourseCategory @relation(fields: [categoryId], references: [id])
  // CourseStatusId Int
  // status         CourseStatus   @relation(fields: [CourseStatusId], references: [id])
}

model CourseCategory {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(255)
  description String   @db.VarChar(255)
  courses     Course[]
}

model CourseStatus {
  id          Int    @id @default(autoincrement())
  status_name String @db.VarChar(255)
  // courses     Course[]
}

model CourseTasks {
  id            Int    @id @default(autoincrement())
  title         String @db.VarChar(255)
  description   String @db.VarChar(255)
  external_link String @db.VarChar(255)
  // CourseId        Int
  // Course          Course         @relation(fields: [CourseId], references: [id])
  // CompletedTaskId Int
  // CompletedTask   CompletedTask?
}

model CompletedTask {
  id        Int     @id @default(autoincrement())
  // userCompletedtaskId Int
  completed Boolean
  // user                User        @relation(fields: [userCompletedtaskId], references: [id])
  // CourseTasksId       Int         @unique
  // CourseTask          CourseTasks @relation(fields: [CourseTasksId], references: [id])
}
